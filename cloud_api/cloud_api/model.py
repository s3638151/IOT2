from cloud_api import db
from hashlib import md5
from random import Random

class User(db.Model):
    '''
    user data model

    Attributes:
        username: username for a user
        email: email for a user
        password: password for a user, password is hashed and salted
        firstname: user first name
        lastname: user last name

    '''    
    username = db.Column(db.String(80), primary_key=True)
    email = db.Column(db.String(120), unique=True)
    password = db.Column(db.String(120))
    firstname = db.Column(db.String(80))
    lastname = db.Column(db.String(80))

    def __init__(self, username, email, firstname, lastname, password):
        self.username = username
        self.email = email
        self.password = password
        self.firstname = firstname
        self.lastname = lastname

    def __repr__(self):
        return '<User %r>' % self.username

    @staticmethod
    def create_salt(length = 4):
        """create a random salt for a user

        create a random salt, default length is 4

        Args:
            length: length for a random salt. default value is 4

        Returns:
            return salt
        """
        salt = ''
        chars = 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789'
        #   retieve chars length
        len_chars = len(chars)-1
        random = Random()
        for i in range(length):
            #   build a salt value
            salt += chars[random.randint(0,len_chars)]
        return salt

    @staticmethod
    def generate_salted_password_hash(password):
        """generate a md5 hash with salt for a password

        create a random salt, then generate a md5 hash for password+salt
        saved password format is salt+hash

        Args:
            password: password to hash and salt

        Returns:
            return salt+md5(password+salt)
        """

        salt = User.create_salt()
        md5_obj = md5()
        md5_obj.update((password+salt).encode('utf-8'))
        #salt is saved along with salted password hash
        return salt+md5_obj.hexdigest()

    @staticmethod
    def validate_salted_password_hash(raw_password, salted_password_hash):
        """helper function to validate raw password and salted password hash

        validate raw password against salted password has,
        retrieve salt from salted password hash, apply generate_salted_password_hash 
        on raw password. Then compare to two values

        Args:
            raw_password: raw password 
            salted_password_hash: salted password hash. The one saved in database

        Returns:
            return true if it is matched, otherwise false
        """
        salt = salted_password_hash[0:4]
        md5_obj = md5()
        md5_obj.update((raw_password+salt).encode('utf-8'))
        #salt is saved along with salted password hash
        return (salt+md5_obj.hexdigest())==salted_password_hash




class Car(db.Model):
    '''
    car data model

    Attributes:
        id: car id generated by uuid function
        brand: car band like BMW, GM, Ford
        body_type: car body type: small, medium, large
        year_manufactured: the year of manufactured
        rent_id: id referring to rent record

    '''    
    id = db.Column(db.String(64), primary_key=True)
    brand = db.Column(db.String(45))
    body_type = db.Column(db.String(45))
    year_manufactured = db.Column(db.Integer)
    rent_id = db.Column(db.String(64))

    def __init__(self, id, brand, body_type, year_manufactured, rent_id):
        self.id = id
        self.brand = brand
        self.body_type = body_type
        self.year_manufactured = year_manufactured 
        self.rent_id = rent_id


    def __repr__(self):
        return '<ID %r>' % self.id





class Rent_record(db.Model):
    '''
    rent record data model

    Attributes:
        id: rent record id, generate by uuid function
        car_id: id referring the car to rent
        username: username who rents the car
        status: current rent status, booked, returned, etc
        pick_ts: the time to pick up the car
        unlock_ts: the time to lock the car
        return_ts: the time to return the car

    '''    
    id = db.Column(db.String(64), primary_key=True)
    car_id = db.Column(db.String(64))
    username = db.Column(db.String(32))
    status = db.Column(db.String(45))
    pickup_ts = db.Column(db.DateTime)
    unlock_ts = db.Column(db.DateTime)
    return_ts = db.Column(db.DateTime)

    def __init__(self, id, car_id, username, status, pickup_ts, unlock_ts, return_ts):
        self.id = id
        self.car_id = car_id
        self.username = username
        self.status = status 
        self.pickup_ts = pickup_ts
        self.unlock_ts = unlock_ts
        self.return_ts = return_ts


    def __repr__(self):
        return '<ID %r>' % self.id